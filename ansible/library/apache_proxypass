#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of ALA ansible scripts
#
# TODO Licence

DOCUMENTATION = '''
---
module: apache_proxypass
short_description: Add or remove a proxy pass entry to a virtual host
description:
   - Add or remove a proxy pass entry to a virtual host
   - Automatically adds a proxypassreverse for http destinations
   - Debian and Ubuntu only
version_added: "1.8.1"
options:
  name:
    description:
      - hostname of the virtual host to add or remove
    required: true
    default: None
  src:
    description:
      - the proxypass source path
    required: true
    default: None
  dest:
    description:
      - the proxypass destination
    required: true
    default: None
  state:
    description:
      - The proxypass state
      - absent is not current supported, use a2dissite instead?
    required: false
    default: present
    choices: [ "present", "absent" ]
  ssl:
    description:
      - Whether HTTPS is enabled in the virtual host (default false)
    required: false
    default: false
  force_https:
    description:
        - If true, all http (port 80) requests are redirected to https; if false, app runs on both 80 and 443
    required: false
    default: true
notes:
   - This module uses I(python-augeas), a Python Augeas binding library. You must ensure that python-augeas is installed on the host before using this module.
   - If SSL is enabled then there will be 2 VirtualHosts for each file: one for HTTPS on port 443 and one for HTTP on port 80. The VHost on port 80 simply redirects all traffic to HTTPS. The convention in use is to put the HTTP VHost second, and all proxy pass rules are associated with the HTTPS vhost. Therefore, this library assumes the proxy pass elements belong to the FIRST VirtualHost element in the file. 
requirements: [ python-augeas ]
author: Simon Bear
'''

EXAMPLES = '''
# Add a reverse proxy entry from /foo on app.example.com to http://localhost:8080/foo
- apache_proxypass: name=app.exmaple.com src=/foo dest=http://localhost:8080/foo state=present
'''


try:
    import augeas
except ImportError:
    augeas_found = False
else:
    augeas_found = True


def load_augeas_for_file(root="/etc/apache2/sites-available", lens="httpd.lns", filename="*.conf", check_mode=False):
    aug = augeas.Augeas(root, None, augeas.Augeas.NO_LOAD | augeas.Augeas.NO_MODL_AUTOLOAD | (
        augeas.Augeas.SAVE_NOOP if check_mode else augeas.Augeas.SAVE_BACKUP))
    aug.add_transform(lens, filename)
    aug.load()
    return aug


def set_directive(aug, filename, path, directive, virtualHostIndex):
    parts = directive.split(" ")

    aug.set(path % locals(), parts[0])
    for index in range(1, len(parts)):
        argPath = path + "/arg[%(index)s]"
        aug.set(argPath % locals(), parts[index])


def ensure_directive(aug, filename, vhost, vhost_index, key, value):
    match = aug.match('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/*[self::directive="%(key)s"]' % locals())
    if len(match) == 0:
        aug.set('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/directive[last()+1]' % locals(), key)
    aug.set('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/*[self::directive="%(key)s"]/arg' % locals(), value)


def ensure_proxy_pass_exists(aug, filename, vhost, src, dest, proxy_vhosts):

    for vhost_index in proxy_vhosts:
        #Ensure some basic mod_proxy config is enabled for the vhost:
        ensure_directive(aug, filename, vhost, vhost_index, "ProxyRequests", "Off")
        ensure_directive(aug, filename, vhost, vhost_index, "ProxyPreserveHost", "On")
        ensure_directive(aug, filename, vhost, vhost_index, "ProxyVia", "full")

        match = aug.match('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/'
            '*[self::directive="ProxyPass"][arg[1]="%(src)s"]' % locals())

        if len(match) == 0:
            aug.set('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/directive[last()+1]' % locals(), "ProxyPass")
            aug.set('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/*[self::directive="ProxyPass"][last()]/arg[1]' % locals(), src)
            aug.set('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/*[self::directive="ProxyPass"][last()]/arg[2]' % locals(), dest)
        else:
            aug.set('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/*[self::directive="ProxyPass"][arg[1]="%(src)s"]/arg[1]' % locals(), src)
            aug.set('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/*[self::directive="ProxyPass"][arg[1]="%(src)s"]/arg[2]' % locals(), dest)

        if dest.startswith('http'):
            aug.set(
                ('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/directive[last()+1]'
                 % locals()),
                "ProxyPassReverse")
            aug.set(
                ('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/*[self::directive="ProxyPassReverse"]/arg[1]'
                 % locals()),
                src)
            aug.set(
                ('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/*[self::directive="ProxyPassReverse"]/arg[2]'
                 % locals()),
                dest)


def remove_proxy_pass(aug, filename, vhost, src, dest, proxy_vhosts):
    for vhost_index in proxy_vhosts:
        aug.remove('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/'
                   '*[self::directive="ProxyPass"][arg[1] = "%(src)s" and arg[2] = "%(dest)s"]' % locals())
        aug.remove('/files/%(filename)s.conf/VirtualHost[%(vhost_index)s]/'
                   '*[self::directive="ProxyPassReverse"][arg[1] = "%(src)s" and arg[2] = "%(dest)s"]' % locals())


def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True),
            filename=dict(default=None, required=False),
            src=dict(required=True),
            dest=dict(required=True),
            state=dict(default="present", choices=["absent", "present"]),
            ssl=dict(default=False, required=False, type="bool"),
            force_https=dict(default=True, required=False, type="bool"),
        ),
        supports_check_mode=True
    )

    vhost = module.params["name"]
    filename = module.params["filename"]
    src = module.params["src"]
    dest = module.params["dest"]
    state = module.params["state"]
    ssl = module.params["ssl"]
    force_https = module.params["force_https"]

    if not filename:
        filename = vhost

    try:
        aug = load_augeas_for_file(check_mode=module.check_mode)
    except Exception, e:
        module.fail_json(msg="unable to connect to Augeas: %s" % e)
        return

    # determine how many/which vhosts to modify
    if ssl:
        if force_https:
            # vhost 1 (port 80) is just a redirect to vhost 2 (port 443)
            proxy_vhosts = [2]
        else:
            # both vhost 1 (port 80) and vhost 2 (port 443) are proxying the app
            proxy_vhosts = [1,2]
    else:
        # vhost 1 (port 80) only
        proxy_vhosts = [1]

    try:
        if state == 'present':
            ensure_proxy_pass_exists(aug, filename, vhost, src, dest, proxy_vhosts)
        elif state == 'absent':
            remove_proxy_pass(aug, filename, vhost, src, dest, proxy_vhosts)
            module.fail_json(msg="state=absent is not implemented yet" % locals())
            return
    except Exception, e:
        module.fail_json(msg="an error occurred while making changes: %s" % e)
        return

    try:
        aug.save()
        saved = aug.get("/augeas/events/saved")
        errors = aug.get("/augeas//errors")
        aug.close()
        changed = True if saved else False
        module.exit_json(changed=True if saved else False, name=vhost, saved=saved, errors=errors)
    except Exception, e:
        module.fail_json(msg="exception while performing augeas operations: %s" % e)

# import module snippets
from ansible.module_utils.basic import *

main()
