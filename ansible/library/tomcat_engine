#!/usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of ALA ansible scripts
#
# TODO Licence

DOCUMENTATION = '''
---
module: tomcat_engine
short_description: Add or remove a Tomcat engine
description:
   - Add or remove a Tomcat engine and set associated properties.
version_added: "1.6.2"
options:
  name:
    description:
      - the name of the Engine
    required: false
    default: Catalina
  service:
    description:
      - the name of the parent service
      required: false
      default: Catalina
  default_vhost:
    description:
      - The default vhost
    required: false
    default: localhost
  tomcat_users:
    description:
      - whether to include the realm that connects to the tomcat-users.xml file.
  state:
    description:
      - The engine state
    required: false
    default: present
    choices: [ "present", "absent" ]
  tomcat_conf_dir:
    description:
      - The tomcat conf directory
    required: false
    default: /etc/tomcat7 on debian, /etc/tomcat6 on enterprise linux
notes:
   - This module uses I(python-augeas), a Python Augeas binding library. You must ensure that python-augeas is installed
     on the host before using this module.
   - This module uses I(python-libxml2), a Python binding for the libxml2 library.  You must ensure that python-libxml2
     is installed on the host before using this module.
requirements: [ python-augeas, python-libxml2 ]
author: Simon Bear
'''

EXAMPLES = '''
'''

try:
    import augeas
except ImportError:
    augeas_found = False
else:
    augeas_found = True

import logging
logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger('tomcat_engine')

class NotSupportedError(Exception):
    pass


# ===========================================
# Tomcat Engine module specific support methods.
#

def load_augeas_for_file(root="/etc/tomcat7", lens="Xml.lns", filename="server.xml", check_mode=False):
    aug = augeas.Augeas(root, None, augeas.Augeas.NO_LOAD | augeas.Augeas.NO_MODL_AUTOLOAD | (
        augeas.Augeas.SAVE_NOOP if check_mode else augeas.Augeas.SAVE_BACKUP))
    aug.add_transform(lens, filename)
    aug.load()
    return aug


def b2xs(string):
    return str(string).lower()


def tomcat_dir_for_distrib(distribution):
    if distribution.lower() in ["redhat", "centos"]:
        return '/etc/tomcat6'
    else:
        return '/etc/tomcat7'


def xml_lint(filename):
    try:
        import libxml2
        libxml2.thrDefIndentTreeOutput(1)
        libxml2.keepBlanksDefault(0)
        x = libxml2.parseFile(filename)
        x.saveFormatFile(filename, 1)
    except ImportError:
        pass


def create_tomcat_users(aug):
    if not aug.match("$engine/Realm[#attribute/className=\"org.apache.catalina.realm.LockOutRealm\"]"
                     "[Realm/#attribute/className=\"org.apache.catalina.realm.UserDatabaseRealm\"]"
                     "[Realm/#attribute/resourceName=\"UserDatabase\"]/#attribute/className"):

        aug.set("$engine/Realm[#attribute/className=\"org.apache.catalina.realm.LockOutRealm\"]"
                "[Realm/#attribute/className=\"org.apache.catalina.realm.UserDatabaseRealm\"]"
                "[Realm/#attribute/resourceName=\"UserDatabase\"]/#attribute/className",
                "org.apache.catalina.realm.LockOutRealm")

        aug.set("$engine/Realm[#attribute/className=\"org.apache.catalina.realm.LockOutRealm\"][last()]"
                "/Realm/#attribute/className",
                "org.apache.catalina.realm.UserDatabaseRealm")
        aug.set("$engine/Realm[#attribute/className=\"org.apache.catalina.realm.LockOutRealm\"][last()]"
                "/Realm/#attribute/resourceName",
                "UserDatabase")


def create_engine(aug, name, service, default_vhost, tomcat_users, jvm_route):

    aug.set("/files/server.xml/Server/Service[#attribute/name=\"%(service)s\"]/"
            "Engine[#attribute/name=\"%(name)s\"]/#attribute/name" % locals(), name)

    aug.defvar("engine", "/files/server.xml/Server/Service[#attribute/name=\"%(service)s\"]"
                         "/Engine[#attribute/name=\"%(name)s\"]" % locals())

    if jvm_route:
        aug.set("$engine/#attribute/jvmRoute", jvm_route)
    else:
        aug.remove("$engine/#attribute/jvmRoute")

    if default_vhost:
        aug.set("$engine/#attribute/defaultHost", default_vhost)
    else:
        aug.remove("$engine/#attribute/defaultHost")

    if tomcat_users:
        create_tomcat_users(aug)
    else:
        aug.remove("$engine/Realm[#attribute/className=\"org.apache.catalina.realm.LockOutRealm\"]"
                   "[Realm/#attribute/className=\"org.apache.catalina.realm.UserDatabaseRealm\"]"
                   "[Realm/#attribute/resourceName=\"UserDatabase\"]")


def remove_engine(aug, name, service):
    aug.remove("/files/server.xml/Server/Service[#attribute/name=\"%(service)s\"]/Engine[#attribute/name=\"%(name)s\"]"
               % locals())

# ===========================================
# Module execution.
#

def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(default="Catalina"),
            service=dict(default="Catalina"),
            default_vhost=dict(default="localhost"),
            tomcat_users=dict(default=True, type="bool"),
            jvm_route=dict(),
            state=dict(default="present", choices=["absent", "present"]),
            tomcat_conf_dir=dict(default=None)
        ),
        supports_check_mode=True
    )

    if not augeas_found:
        module.fail_json(msg="the python augeas module is required")

    name = module.params["name"]
    service = module.params["service"]
    default_vhost = module.params["default_vhost"]
    tomcat_users = module.params["tomcat_users"]
    jvm_route = module.params["jvm_route"]
    state = module.params["state"]

    tomcat_conf_dir = module.params["tomcat_conf_dir"]

    if not tomcat_conf_dir:
        distribution = get_distribution()
        tomcat_conf_dir = tomcat_dir_for_distrib(distribution)

    try:
        aug = load_augeas_for_file(root=tomcat_conf_dir, check_mode=module.check_mode)
    except Exception as e:
        module.fail_json(msg="unable to connect to Augeas: %s" % e)
        return

    try:
        if state == "absent":
            remove_engine(aug, name, service)
        else:
            create_engine(aug, name, service, default_vhost, tomcat_users, jvm_route)

        aug.save()
        saved = aug.get("/augeas/events/saved")
        errors = aug.get("/augeas//errors")
        aug.close()
        if saved and not module.check_mode:
            xml_lint(tomcat_conf_dir+"/server.xml")

        module.exit_json(changed=True if saved else False, name=name, service=service, tomcat_conf_dir=tomcat_conf_dir,
                         saved=saved, errors=errors)

    except Exception as e:
        log.exception("exception while performing augeas operation")
        module.fail_json(msg="exception while performing augeas operations: %s" % e)

# import module snippets
from ansible.module_utils.basic import *

main()
