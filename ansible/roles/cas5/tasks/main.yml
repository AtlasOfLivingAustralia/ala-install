- name: "set facts"
  include_role:
    name: common
    tasks_from: setfacts
  tags:
  - setfacts
  - cas
  - properties

- name: "Ensure system user for CAS"
  user:
    name: cas
    state: present
    system: yes
  tags:
  - service
  - cas
  - properties

- name: ensure target directories exist data subdirectories etc.
  file:
    path: "{{item}}"
    state: directory
    owner: "{{ cas_user | default('cas') }}"
    group: "{{ cas_user | default('cas') }}"
  with_items:
    - "{{data_dir}}/cas"
    - "{{data_dir}}/cas/config"
    - "{{data_dir}}/cas/"
    - /var/log/atlas/cas/
  tags:
    - properties
    - cas

- name: set data ownership
  file:
    path: "{{data_dir}}/cas"
    owner: "{{ cas_user | default('cas') }}"
    group: "{{ cas_user | default('cas') }}"
    recurse: true
  tags:
    - properties
    - cas

- name: copy application.yml
  template:
    src: application.yml
    dest: "{{data_dir}}/cas/config/application.yml"
    owner: "{{ cas_user | default('cas') }}"
    group: "{{ cas_user | default('cas') }}"
  when: cas_version is version('6', '>=')
  notify:
    - restart cas
  tags:
    - properties
    - cas

- name: copy application.yml
  template:
    src: application-pre-6.yml
    dest: "{{data_dir}}/cas/config/application.yml"
    owner: "{{ cas_user | default('cas') }}"
    group: "{{ cas_user | default('cas') }}"
  when: cas_version is version('6', '<')
  notify:
    - restart cas
  tags:
    - properties
    - cas

- name: copy logback config
  template:
    src: log4j2.xml
    dest: "{{data_dir}}/cas/config/log4j2.xml"
    owner: "{{ cas_user | default('cas') }}"
    group: "{{ cas_user | default('cas') }}"
  tags:
    - properties
    - cas

- name: copy pwe.properties
  template:
    src: pwe.properties
    dest: "{{data_dir}}/cas/config/pwe.properties"
    owner: "{{ cas_user | default('cas') }}"
    group: "{{ cas_user | default('cas') }}"
  notify:
    - restart cas
  tags:
    - properties
    - cas

# Auto generated if not present, auto generation not suitable for load balanced instances
- name: copy JWKS (if present)
  copy:
    src:  "{{ inventory_dir }}/{{ cas_jwks_file | default('keystore.jwks') }}"
    dest: "{{data_dir}}/cas/keystore.jwks"
    owner: "{{ cas_user | default('cas') }}"
    group: "{{ cas_user | default('cas') }}"
    mode: u=rw,g=,o=
  notify:
    - restart cas
  with_first_found:
    - files:
      - "{{ inventory_dir }}/{{ cas_jwks_file | default('keystore.jwks') }}"
      skip: true
  tags:
    - properties
    - cas

- name: add jar and service
  include_role:
    name: exec-jar
  vars:
    extra_params:
    - key: cas.standalone.configurationDirectory
      value: /data/cas/config
    - key: ala.password.properties
      value: /data/cas/config/pwe.properties
    log_config_filename: 'log4j2.xml'
    service_name: "cas"
    use_openjdk11: "{{ cas_version is version('6', '>=') }}"
    use_openjdk8: "{{ cas_version is version('6', '<') }}"
    java_headless: true
    java_jre: true
    jar_url: '{{ cas_jar_url }}'
  tags:
    - deploy
    - service
    - service-conf
    - cas

- name: Ensure cas is in a running state
  service:
    name: cas
    state: started
  register: casService
  until: casService.status.ActiveState == "active"
  retries: 15
  delay: 30
  tags:
    - cas
    - db

- name: wait for cas is running to create the first admin user
  wait_for: host=127.0.0.1 port={{ cas_port | default('9000') }} delay=30
  when: cas_first_admin_email is defined and cas_first_admin_bcrypt_password is defined and cas_first_admin_temp_auth_key is defined
  tags:
    - cas
    - db

- name: ensure target sql directory exist
  file: path={{item}} state=directory owner="{{ cas_user | default('cas') }}" group="{{ cas_user | default('cas') }}"
  with_items:
    - "{{data_dir}}/cas/setup"
  when: cas_first_admin_email is defined and cas_first_admin_bcrypt_password is defined and cas_first_admin_temp_auth_key is defined
  tags:
    - cas
    - db
    - properties

- name: copy all SQL first admin scripts
  template: src={{ item }} dest={{data_dir}}/cas/setup/
  with_items:
    - "sql/role-editor.sql"
    - "sql/admin-add.sql"
  when: cas_first_admin_email is defined and cas_first_admin_bcrypt_password is defined and cas_first_admin_temp_auth_key is defined
  tags:
    - cas
    - db
    - properties

- name: create role editor and first admin user if do not exist
  shell: "mysql --host={{ cas_db_hostname | default('localhost') }} --port={{ cas_db_port | default('3306') }}  --user={{ cas_db_username | default('cas') }} --password={{ cas_db_password | default('password') }} {{ cas_db_name | default('emmet')  }} < {{data_dir}}/cas/setup/{{ item }}"
  with_items:
    - "role-editor.sql"
    - "admin-add.sql"
  when: cas_first_admin_email is defined and cas_first_admin_bcrypt_password is defined and cas_first_admin_temp_auth_key is defined
  ignore_errors: no
  tags:
    - cas
    - db

- name: add nginx vhost
  include_role:
    name: nginx_vhost
  vars:
    appname: "cas"
    hostname: "{{ cas_host_name }}"
    context_path: "{{ cas_context_path | default('cas') }}"
    nginx_paths:
      - path: "/{{ cas_context_path | default('cas') }}"
        appname: "cas"
        is_proxy: true
        proxy_pass: "http://127.0.0.1:{{ cas_port | default('9000') }}/{{ cas_context_path | default('cas') }}"
  tags:
    - nginx_vhost
    - deploy
    - cas
  when: webserver_nginx
