- set_fact: root_app={{context_path == "" or context_path == "/"}}
- set_fact: vhost={{ hostname.find(':') == -1 and hostname.find('localhost') == -1 and hostname.find('127.0.0.1') == -1 }}

- set_fact: war_filename="ROOT" log_filename={{ log_filename | default(artifactId) }}
  when: root_app

- set_fact: war_filename="{{ context_path.replace('/', '') }}" log_filename={{ log_filename | default(context_path.replace('/', '')) }}
  when: not root_app

- set_fact: tomcat_deploy_dir="{{ tomcat_dir }}/webapps"
  when: not vhost

- set_fact: tomcat_deploy_dir="{{ tomcat_dir }}/webapps-{{hostname }}"
  when: vhost

- debug: msg="war_filename is {{ war_filename }}; tomcat_deploy_dir is {{ tomcat_deploy_dir }}; log_filename is {{ log_filename }}"

- name: Install lxml for ansible python 2
  apt:
    name: python-lxml
    state: present
  when: ansible_python.version.major==2

- name: Install lxml for ansible python 3
  apt:
    name: python3-lxml
    state: present
  when: ansible_python.version.major==3

- name: create tomcat vhost
  tomcat_vhost: name="{{ hostname }}" remote_ip_valve="{{tomcat_enable_remote_ip_valve | default(false)}}" remote_internal_proxies="{{tomcat_remote_internal_proxies | default(None)}}" tomcat_conf_dir="{{ tomcat_conf_dir }}"
  when: vhost
  notify:
    - restart tomcat

- name: ensure tomcat vhost webapps directory exists if necessary
  file: path="{{ tomcat_deploy_dir }}" state=directory owner={{tomcat_user}} group={{tomcat_user}}
  when: vhost
  notify:
    - restart tomcat

- name: check war file existence
  stat: path="{{ tomcat_deploy_dir }}/{{ war_filename }}.war"
  register: war_exist

- name: back up existing war file
  copy: src={{ tomcat_deploy_dir }}/{{ war_filename }}.war dest="{{ backup_dir | default('/data') }}/{{ war_filename }}_{{ansible_date_time.iso8601}}.war" remote_src=True
  when: war_exist.stat.exists == True

- name: check if a log file exists
  stat: path="{{ tomcat_log_dir }}/{{ log_filename }}.log"
  register: log_exist

- name: back up tomcat log file
  copy: src={{ tomcat_log_dir }}/{{ log_filename }}.log dest="{{ tomcat_log_dir }}/{{ log_filename }}.log.{{ ansible_date_time.iso8601 }}" remote_src=True
  when: log_exist.stat.exists == True
  
- name: remove existing webapp (to ensure a clean redeployment)
  file: path="{{ tomcat_deploy_dir }}/{{ war_filename }}.war" state=absent

- name: download from url {{ war_url }}
  get_url: url={{ war_url }} dest="{{ tomcat_deploy_dir }}/{{ war_filename }}.war" checksum="{{ war_checksum | default('') }}" force=true timeout=60
  when:
    - war_local_build is not defined
    - tomcat_deploy_from_url | default(false)
  notify:
    - restart tomcat

- name: "download {{artifactId}} version {{version|default('latest')}} from maven repo {{ maven_repo_url }}"
  maven_artifact:
    group_id: "{{groupId | default('au.org.ala')}}"
    artifact_id: "{{artifactId}}"
    version: "{{version|default('latest')}}"
    extension: "{{packaging|default('jar')}}"
    classifier: "{{classifier|default('')}}"
    repository_url: "{{maven_repo_url}}"
    timeout: 30
    dest: "{{ tomcat_deploy_dir }}/{{ war_filename }}.war"
    mode: u=rwx,g=rx,o=rx
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_user }}"
    verify_checksum: always
  when:
    - war_local_build is not defined
    - not tomcat_deploy_from_url | default(false)
  notify:
    - restart tomcat

- name: download from local build
  copy: src={{ war_local_build }} dest="{{ tomcat_deploy_dir }}/{{ war_filename }}.war" force=yes
  when: war_local_build is defined
  notify:
    - restart tomcat
