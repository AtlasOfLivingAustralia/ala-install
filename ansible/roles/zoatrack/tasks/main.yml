# Zoatrack main app

- name: install python-dev, netcdf-bin, unzip
  apt: 
    pkg: ['python-dev', 'netcdf-bin', 'unzip']
    state: latest
  tags:
    - rserve
  register: r_installed

- name: add repo source for R
  template:  src="zoatrack.list" dest="/etc/apt/sources.list.d/zoatrack.list"
  tags: rserve

- name: get key from ubuntu
  apt_key: 
    keyserver: "keyserver.ubuntu.com"
    id: "E298A3A825C0D65DFD57CBB651716619E084DAB9"
    state: present
  tags: rserve

- name: 3rd party libs
  apt:
    pkg: ['libssl-dev', 'libgdal-dev', 'libproj-dev', 'libxml2-dev', 'libnetcdf-dev', 'libpq-dev']
    state: latest
    update_cache: yes
  tags: rserve

- name: install R
  apt:
    pkg: "r-base"
    state: present
  tags: rserve

- name: add devtool for installing a given version of packages
  command: /usr/bin/Rscript --slave --no-save --no-restore-history -e "if (! ('devtools' %in% installed.packages()[,'Package'])) install.packages('devtools', repos=c('http://cran.r-project.org/'))"
  tags: rserve


- name: install specified version of rgdal
  command: /usr/bin/Rscript --slave --no-save --no-restore-history -e "devtools::install_version('rgdal', version='1.4-4',repos=c('https://cran.csiro.au/'))"
  tags: rserve

- name: add R package Rserve.
  command: /usr/bin/Rscript --slave --no-save --no-restore-history -e "if (! ('{{item}}' %in% installed.packages()[,'Package'])) install.packages('{{item}}', repos=c('http://rforge.net'))"
  with_items:
    - Rserve
  tags: rserve

#missing packages
#alphahull, date, ncdf4
- name: add R packages. WARNING inlmisc needs a SLOW compilation.
  command: /usr/bin/Rscript --slave --no-save --no-restore-history -e "if (! ('{{item}}' %in% installed.packages()[,'Package'])) install.packages('{{item}}', repos=c('https://cran.csiro.au/'))"
  with_items:
    - sp
    - ade4
    - adehabitatHR
    - adehabitatMA
    - maptools
    - shapefiles
    - alphahull
    - raster
    - plyr
    - spatstat
    - Grid2Polygons
    - RColorBrewer
    - googleVis
    - spacetime
    - plotKML
    - nc
    - ncdf4
    - date
    - inlmisc  #Grid2Polygon needs it
  tags: rserve


#Grid2Polygons 0.2.1  not available for R 3.4.4  #try inlmisc # not working
#wget https://cran.r-project.org/src/contrib/Archive/Grid2Polygons/Grid2Polygons_0.2.1.tar.gz
#R CMD INSTALL Grid2Polygons_0.2.1.tar.gz

- name: download kftrack & ukfsst & Grid2Polygons
  get_url:
    url: '{{ item }}'
    dest: /tmp
  with_items:
    - https://cran.r-project.org/src/contrib/Archive/Grid2Polygons/Grid2Polygons_0.2.1.tar.gz
    - https://github.com/positioning/kalmanfilter/raw/master/downloads/R3x/64bit/linux/kftrack_0.70-x64.tar.gz
    - https://github.com/positioning/kalmanfilter/raw/master/downloads/R3x/64bit/linux/ukfsst_0.3-x64.tar.gz
  tags: rserve

- name: install kftrack & ukfsst & Grid2Polygons
  command: "R CMD INSTALL {{ item }}"
  with_items:
    - /tmp/Grid2Polygons_0.2.1.tar.gz
    - /tmp/kftrack_0.70-x64.tar.gz
    - /tmp/ukfsst_0.3-x64.tar.gz
  tags: rserve


# Start Rserve as service
- name: copy rserve.sh to /usr/lib/R/bin/
  template:  src="rserve.sh" dest="/usr/lib/R/bin/"
  tags: rserve

- name: change rserve.sh to "+x"
  file: dest=/usr/lib/R/bin/rserve.sh mode=a+x
  tags: rserve

- name: copy rserve.service to /etc/systemd/system
  template:  src="rserve.service" dest="/etc/systemd/system"
  tags: rserve

- name: just force systemd to reread configs (2.4 and above)
  systemd:
    daemon_reload: yes

- name: enable service rserve
  systemd:
   name: rserve
   enabled: yes
  tags: rserve

- name: add postgres repository key
  apt_key: url=http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc state=present
  tags: postgresql

#Already added into oztrack.list

- name: add postgres repository
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ {{ linux_version }}-pgdg main' state=present
  tags: postgresql

- name: update and upgrade apt packages
  apt:
    upgrade: yes
    update_cache: yes
  tags: postgresql

- name: install PostgreSQL
  apt: 
    pkg: ['postgresql-{{ pg_version }}', 'postgresql-client-{{ pg_version }}', 'postgresql-{{ pg_version}}-postgis-{{ pg_gis_version }}', 'postgresql-contrib-{{ pg_version }}']
    state: present
  register: postgresql_installed
  tags: postgresql

- name: Get installed pip version
  command: "{{ pip_executable }} --version"
  register: pip_version_output
  ignore_errors: yes
  changed_when: false
  tags: postgresql

- name: Download get-pip.py
  vars:
      pip_version_url: "{{ (pip_get_pip_version == 'latest') | ternary('', pip_get_pip_version) }}"
      required_vars:
          - pip_get_pip_version
  get_url:
      url: 'https://bootstrap.pypa.io/{{ pip_version_url }}/get-pip.py'
      dest: /tmp/get-pip.py
  when: (pip_version_output is failed) or not pip_version_output.stdout is search(pip_version)
  tags: postgresql

# Install pip if it's not already installed, or if
# the desired versions of pip aren't installed
# The regular expression extracts '9.0' out of '9.0.*'
- name: Install pip
  command: "{{ ansible_python_interpreter if ansible_python_interpreter is defined else 'python' }} get-pip.py pip=={{ pip_version }}"
  when: "(pip_version_output is failed) or not pip_version_output.stdout is search('pip ' + pip_version)"
  args:
    chdir: /tmp
  tags: postgresql

#  psycopg2 rely on python3.6
#  or install python-dev package
- name: use pip to install psycopg2 postgresql adapter for python 
  pip:
    name: psycopg2
    state: forcereinstall
  tags: postgresql

# For dev mode, we may need to enable external access to psql
# 1: /etc/postgresql/9.4/main/postgresql.conf  change  listen_addresses = '*'
# 2: /etc/postgresql/9.4/main/pg_hba.conf    host all all 0.0.0.0/0 md5

- name: set postgres auth
  lineinfile: dest="/etc/postgresql/{{ zoatrack_pg_version }}/main/pg_hba.conf" backrefs="yes" regexp="local   all             all                                     peer" line="local   all             all                                     md5"
  tags: postgresql

- name: create zoatrack PG user
  postgresql_user: name="{{ zoatrack_pg_user }}" password="{{ zoatrack_pg_password }}" role_attr_flags="CREATEDB,SUPERUSER"
  become_user: postgres
  tags: postgresql

- name: create zoatrack PG db
  postgresql_db: name="{{ zoatrack_pg_database }}" owner="{{ zoatrack_pg_user }}"
  become_user: postgres
  tags: postgresql

- name: create postgis extensions
  become_user: postgres
  command: "psql {{ item }}"
  with_items:
    - "-d {{ zoatrack_pg_database }} -c 'create extension postgis'"
    - "-d {{ zoatrack_pg_database }} -c 'create extension postgis_topology'"
    - "-d {{ zoatrack_pg_database }} -c 'create extension \"uuid-ossp\"'"
  ignore_errors: yes
  tags: postgresql

- name: alter owner postgis extensions
  become_user: postgres
  command: "psql {{ item }}"
  with_items:
    - "-d {{ zoatrack_pg_database }} -c 'alter table spatial_ref_sys owner to {{ zoatrack_pg_user }};'"
    - "-d {{ zoatrack_pg_database }} -c 'alter view geography_columns owner to {{ zoatrack_pg_user }};'"
  tags: postgresql


#########################################

- name: copy tomcat server.xml
  template:
    src: "server.{{ tomcat }}.xml"
    dest: "/etc/{{ tomcat }}/server.xml"
  notify:
    - reload tomcat
  tags: tomcat

##############################################

- name: download geoserver
  get_url:
    url: http://downloads.sourceforge.net/geoserver/geoserver-{{ geoserver_version }}-war.zip
    dest: /tmp
  tags: geoserver

- name: extract geoserver
  unarchive:
    src: /tmp/geoserver-{{ geoserver_version }}-war.zip
    dest: /tmp
    remote_src: yes
  tags: geoserver

- name: copy geoserver to webapps
  copy:
    src: "/tmp/geoserver.war"
    dest: "/var/lib/{{ tomcat }}/webapps"
    remote_src: yes
    owner: "{{ tomcat }}"
    group: "{{ tomcat }}"
  tags: geoserver

- name: add geoserver dir to default tomcat config
  lineinfile:
    dest: "{{ tomcat_conf }}"
    regexp: "^GEOSERVER_DATA_DIR"
    line: 'export GEOSERVER_DATA_DIR="{{ geoserver_data_dir }}"'
  notify:
    - reload tomcat
  tags: geoserver

- name: add nginx vhost
  include_role:
    name: nginx_vhost
  vars:
    hostname: "{{ zoatrack_hostname }}"
    context_path: "/"
    nginx_root: "/var/www/html"
    nginx_paths:
      - path: '~ /\.'
        is_proxy: false
        deny: true
      - path: "/"
        is_proxy: true
        proxy_pass: "http://127.0.0.1:8080"
      - path: "{{ geoserver_context_path }}"
        is_proxy: true
        proxy_pass: "{{ geoserver_url }}"
  tags:
    - nginx_vhost
  when: webserver_nginx


#########################################
# - name: install apache
#   apt: pkg={{ item }} state=latest
#   with_items:
#     - apache2
#     - libapache2-mod-shib2

#   tags: apache

# #openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mysitename.key -out mysitename.crt
# - name: Creates SSL cert directory
#   file: path=/etc/apache2/ssl/ state=directory
#   tags: apache


# - name: create self-cert
#   become: yes
#   command: "openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/oztrack.key -out /etc/apache2/ssl/oztrack.crt -subj '/C=AU/ST=ACT/L=Canberra/O=CSIRO/OU=ALA/CN=ala.org.au'"
#   tags: apache

# - name: Enable mods
#   command: a2enmod {{ item }}
#   with_items:
#     - proxy_http
#     - ssl
#     - shib2
#     - rewrite
#   tags: apache


#######################################


# - name: Download shibboleth certificate
#   become: yes
#   get_url:
#     url: https://ds.aaf.edu.au/distribution/metadata/aaf-metadata-cert.pem
#     dest: /etc/shibboleth
#   tags: apache,shibboleth

# - name: keygen shibboleth
#   become: yes
#   command: 'shib-keygen -f -o /etc/shibboleth -h {{ zoatrack_hostname }} -e https://{{ zoatrack_hostname }}/shibboleth'
#   tags: shibboleth

# - name: update shibboleth config
#   become: yes
#   template:  src="{{ item }}" dest="/etc/shibboleth/"
#   with_items:
#     - shibboleth2.xml
#     - attribute-map.xml
#   tags: apache,shibboleth

###############################################
# - name: update oztrack site
#   become: yes
#   template:  src="oztrack.conf" dest="/etc/apache2/sites-available/oztrack.conf"
#   tags: apache

# - name: Enable oztrack
#   command: a2ensite oztrack
#   notify:
#     - reload apache
#   tags: apache

###############################################
#https://nexus.ala.org.au/service/local/repositories/snapshots/content/org/oztrack/oztrack/4.9-SNAPSHOT/oztrack-4.9-20160913.074922-4.war
- name: Clear ROOT on Tomcat
  command: "{{ item }}"
  with_items:
    - "service {{ tomcat }} stop"
    - "rm /var/lib/{{ tomcat }}/webapps/ROOT.war"
    - "rm -r /var/lib/{{ tomcat }}/webapps/ROOT"
  ignore_errors: true
  tags: zoatrack


- name: download zoatrack war
  #become_user: "{{ tomcat }}"
  get_url:
    url: "{{ zoatrack_war_url }}"
    dest: "/var/lib/{{ tomcat }}/webapps/ROOT.war"
  tags: zoatrack

- name: set ownership of webapps
  file:
    path: "/var/lib/{{ tomcat }}/webapps"
    owner: "{{ tomcat }}"
    group: "{{ tomcat }}"
    recurse: yes
  tags: zoatrack

- name: create home dir
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - "{{ zoatrack_home_dir }}"
  tags: zoatrack

- name: create data dir
  file:
    path: "{{ zoatrack_data_dir }}"
    state: directory
    owner: "{{ tomcat }}"
    group: "{{ tomcat }}"
    mode: 0755
  tags: zoatrack

- name: copy zoatrack config
  template:  src="custom.properties" dest="{{ zoatrack_data_dir }}/{{ zoatrack_custom_property_file }}"
  tags: zoatrack_config

- name: add properties to default tomcat config
  lineinfile:
    dest: "{{ tomcat_conf }}"
    regexp: "^JAVA_OPTS"
    line: 'JAVA_OPTS="${JAVA_OPTS} {{ zoatrack_tomcat_java_opts }}"'
  notify:
    - reload tomcat
  tags: zoatrack_config

- name: create backup dir
  file:
    path: "{{ zoatrack_backup_dir }}"
    state: directory
    mode: 0755
  tags: zoatrack





