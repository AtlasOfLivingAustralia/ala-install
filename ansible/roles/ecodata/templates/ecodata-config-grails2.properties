#
# CAS Config
#
casProperties=casServerLoginUrl,serverName,centralServer,casServerName,uriFilterPattern,uriExclusionFilter,authenticateOnlyIfLoggedInFilterPattern,casServerLoginUrlPrefix,gateway,casServerUrlPrefix,contextPath
serverName={{ecodata_url}}
contextPath={{ ecodata_context_path }}
casServerName={{ auth_base_url }}
uriFilterPattern=/admin/.*,/activityForm/(?!get).*
uriExclusionFilterPattern=/images.*,/css.*,/js.*,/less.*
authenticateOnlyIfLoggedInFilterPattern=
casServerLoginUrl={{ auth_cas_url }}/login
gateway=false
casServerUrlPrefix={{ auth_cas_url }}
security.cas.logoutUrl={{ auth_cas_url }}/logout
userDetails.url={{ user_details_url }}
app.uploads.url= {{app_uploads_url}}
grails.serverURL={{ecodata_url}}
app.external.model.dir={{ models_path }}
app.api.whiteList={{ app_api_whiteList | default('') }}

# api key
api_key={{ ecodata_api_key }}

# Spatial portal config
spatial.baseUrl={{ spatial_base_url }}
spatial.wms.url={{ spatial_base_url }}/geoserver/ALA/wms?
spatial.wms.cache.url={{ spatial_base_url }}/geoserver/gwc/service/wms?
spatial.layersUrl=https://spatial.ala.org.au/layers-service
spatial.geoserverUrl={{ spatial_base_url }}/geoserver
spatial.intersectUrl={{ spatial_base_url }}/ws/intersect/
spatial.intersectBatchUrl={{ spatial_base_url }}/ws/intersect/batch

# Image Server config
imagesService.baseURL={{ imagesService_baseURL }}
#userDetails.url=http://authproxy.ala.org.au:8080/UserDetailsProxy/
security.apikey.serviceUrl={{ security_serviceUrl}}

# Collectory config
collectory.baseURL={{ collectory_url }}
collectory.dataProviderUid.merit={{ merit_data_provider_uuid }}
collectory.dataProviderUid.biocollect={{ biocollect_data_provider_uuid }}
collectory.collectoryIntegrationEnabled=true

# Email config
grails.mail.host={{ mail_host | default('localhost') }}
grails.mail.port={{ mail_port | default('25') }}
emailFilter={{ mail_filter | default('') }}
ecodata.support.email.address = {{ ecodata_support_email }}
ecodata.system.email.replyTo = {{ ecodata_noreply_email }}
ecodata.system.email.sender = {{ ecodata_support_email }}

# URL to use to download asynchronously produced files
async.download.url.prefix={{ biocollect_base_url }}/

# Biocollect Project Url for species alert
biocollect.project.url = {{ biocollect_base_url }}/project/index/
biocollect.activity.url = {{ biocollect_base_url }}/bioActivity/index/
biocollect.activity.sightingsUrl={{ biocollect_base_url }}/sightings

biocacheService.baseURL={{ biocacheService_baseUrl }}

temp.dir=/data/ecodata/temp

# Period for cleaning up temporary files, in days
temp.file.cleanup.days=1


scistarter.apiKey={{ scistarter_api_key }}
scistarter.baseUrl=https://scistarter.com
scistarter.projectUrl=/api/project
scistarter.finderUrl=/finder


# Sensitive species data config
sensitive.species.data={{ sensitive_species_data | default('/data/ecodata/config/sensitive-species-data.xml') }}
google.maps.geocode.url=https://maps.googleapis.com/maps/api/geocode/json
google.api.key={{ google_maps_api_key }}

# Database username password
grails.mongo.username={{ ecodata_username }}
grails.mongo.password={{ ecodata_password }}
grails.mongo.databaseName={{ ecodata_database }}

# GeoServer configs
geoServer.enabled = {{ geoserver_enabled }}
geoServer.baseURL={{ geoserver_url }}
geoServer.username={{ geoserver_username }}
geoServer.password={{ geoserver_password }}
geoServer.elasticHome={{ geoserver_elastic_home }}
geoServer.elasticPort={{ geoserver_elastic_port }}
geoServer.clusterName={{ geoserver_cluster_name }}

# elasticsearch config
elasticsearch.local={{ elasticsearch_local }}