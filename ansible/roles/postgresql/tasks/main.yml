- include: ../../common/tasks/setfacts.yml

# tasks file for ntp
- name: Gather OS Specific Variables
  include_vars: "{{ item }}"
  with_first_found:
    - "../vars/{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
    - "../vars/{{ ansible_distribution }}.yml"
    - "../vars/{{ ansible_os_family }}.yml"
  tags: postgresql

- name: install software-properties-common (Debian)
  apt: pkg=software-properties-common  state=present update_cache=yes
  when: ansible_os_family == "Debian" 
  tags: postgresql

- name: install python-pycurl (Debian)
  apt: pkg=python-pycurl state=present
  when: ansible_os_family == "Debian" 
  tags: postgresql

- name: install python-software-properties (Debian)
  apt: pkg=python-software-properties  state=present
  when: ansible_os_family == "Debian" 
  tags: postgresql

- name: Add postgres repository - precise
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main' state=present
  when: ansible_distribution_release == "precise" 
  tags: postgresql

- name: Add postgres repository - trusty
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main' state=present
  when: ansible_distribution_release == "trusty" 
  tags: postgresql

- name: Add postgres repository key
  apt_key: url=http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc state=present
  when: ansible_os_family == "Debian" 
  tags: postgresql

- name: Install Postgres with PostGIS
  apt: pkg={{ item }} state=present update_cache=yes
  with_items:
    - postgresql-9.3-postgis-2.1
    - pgadmin3
    - postgresql-contrib
    - gdal-bin

- name: install yum repo
  yum: name=http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-centos93-9.3-1.noarch.rpm state=present
  when: ansible_os_family == "RedHat"
  tags: postgresql

  # TODO: This assumes Centos 6.4.  Add centos 5,7 variants, rhel variants?
- name: install postgres (RedHat)
  yum: name={{ item }} state=present
  with_items:
   - postgresql93-server
   - postgresql93-devel
   - postgresql93-python
   - python-psycopg2
  when: ansible_os_family == "RedHat"
  tags: postgresql

- name: initdb if doesn't exist (RedHat)
  command: "service {{ postgresql_service }} initdb"
  args:
    creates: /var/lib/pgsql/9.3/data/postgresql.conf # Could have used any file here, this may not be the best choice
  when: ansible_os_family == "RedHat"
  tags: postgresql

- name: enable host md5 auth (RedHat)
  lineinfile: dest=/var/lib/pgsql/9.3/data/pg_hba.conf backrefs=yes regexp="host    all             all             127.0.0.1/32            ident" line="host    all             all             127.0.0.1/32            md5"
  when: ansible_os_family == "RedHat"
  notify: restart postgresql
  tags: postgresql

- name: enable host md5 auth (RedHat)
  lineinfile: dest=/var/lib/pgsql/9.3/data/pg_hba.conf backrefs=yes regexp="host    all             all             ::1/128                 ident" line="host    all             all             ::1/128            md5"
  when: ansible_os_family == "RedHat"
  notify: restart postgresql
  tags: postgresql

- name: Restart postgresql server
  service: name={{ postgresql_service }} state=started enabled=yes
  tags: postgresql

- name: install libpq-dev (Debian)
  apt: pkg=libpq-dev  state=present update_cache=yes
  when: ansible_os_family == "Debian" 
  tags: postgresql

- name: install python-psycopg2 (Debian)
  apt: pkg=python-psycopg2  state=present update_cache=yes
  when: ansible_os_family == "Debian" 
  tags: postgresql

- name: start postgresql and configure to startup automatically
  service: name={{ postgresql_service }} state=started enabled=yes
  register: started
  tags: postgresql

- name: wait for postgresql restart
  command: sleep 2
  when: started.changed
  tags: postgresql

- name: ensure postgresql server is running
  action: service name=postgresql state=started
  tags: postgresql

- name: ensure postgis_template database exists
  postgresql_db: db=postgis_template state=present
  sudo_user: postgres
  tags: postgresql

- name: make postgis_template a template
  action: command psql -d postgis_template -c "UPDATE pg_database SET datistemplate=true WHERE datname='postgis_template';"
  sudo_user: postgres
  tags: postgresql

- name: run the postgis SQL scripts
  action: command psql -d postgis_template -f {{ item }}
  sudo_user: postgres
  with_items:
    - /usr/share/postgresql/9.3/contrib/postgis-2.2/postgis.sql
    - /usr/share/postgresql/9.3/contrib/postgis-2.2/spatial_ref_sys.sql
    - /usr/share/postgresql/9.3/contrib/postgis-2.2/postgis_comments.sql
  tags: postgresql

#- name: ensure user does not have unnecessary privilege
#  postgresql_user: name={{postgres_dbuser}} role_attr_flags=NOSUPERUSER,NOCREATEDB
#  ignore_errors: yes

# sudo -u postgres psql
# ALTER USER postgres PASSWORD 'password';
#  psql -U postgres -h localhost  //should work
