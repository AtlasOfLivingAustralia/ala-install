---
- include_tasks: ../../common/tasks/setfacts.yml
  tags:
    - solrcloud
    - solr_config

- name: Include docker tasks
  include_tasks: docker-tasks.yml
  vars:
    - solr_temp_disable_shardsWhitelist: true
  when: deployment_type == 'swarm'
  tags: [docker, docker-service]

- name: Include VM tasks
  import_tasks: vm-tasks.yml
  when: deployment_type == 'vm'

- name: Check if biocache collection exists
  run_once: true
  uri:
    url: "http://localhost:8983/solr/biocache/select?q=*:*"
    method: GET
    status_code: [200, 404]
  register: collection
  tags:
    - solrcloud
    - solr_create_collection

# https://solr.apache.org/guide/8_8/configsets-api.html
- name: Check if biocache configsets exist already
  run_once: true
  uri:
    url: "http://localhost:8983/solr/admin/configs?action=LIST&name=biocache&omitHeader=true"
    method: GET
    body_format: json
    return_content: true
    status_code: 200
  register: solr_configsets
  tags:
    - solrcloud
    - solr_configsets
  when: collection.status == 404

- name: Debug current configsets
  run_once: true
  debug:
    var: solr_configsets.json.configSets
  tags:
    - solrcloud
    - solr_configsets
  when: collection.status == 404

- name: Delete biocache configset if exists
  run_once: true
  uri:
    url: "http://localhost:8983/solr/admin/configs?action=DELETE&name=biocache&omitHeader=true"
    method: GET
    status_code: 200
  tags:
    - solrcloud
    - solr_configsets
  when: collection.status == 404 and 'biocache' in solr_configsets.json.configSets

- name: ensure target directory for configset exist
  run_once: true
  file:
    path: /tmp/solr-config
    state: directory
  tags:
    - solrcloud
    - solr_configsets
  when: collection.status == 404

- name: Download solr configset from gbif/pipelines
  run_once: true
  get_url:
    url: https://raw.githubusercontent.com/gbif/pipelines/dev/livingatlas/solr/conf/{{ item }}
    dest: /tmp/solr-config/{{item}}
  with_items:
    - elevate.xml
    - managed-schema
    - protwords.txt
    - solrconfig.xml
    - stopwords.txt
    - synonyms.txt
  tags:
    - solrcloud
    - solr_configsets
  when: collection.status == 404

- name: Delete previous configset zip if exists
  run_once: true
  file:
    path: /tmp/solr-config.zip
    state: absent
  tags:
    - solrcloud
    - solr_configsets
  when: collection.status == 404

- name: Create a zip archive of the solr configset
  run_once: true
  archive:
    dest: /tmp/solr-config.zip
    path: /tmp/solr-config/
    format: zip
  tags:
    - solrcloud
    - solr_configsets
  when: collection.status == 404

- name: Update solr biocache configset
  run_once: true
  uri:
    url: http://localhost:8983/solr/admin/configs?action=UPLOAD&name=biocache
    method: POST
    remote_src: true
    src: /tmp/solr-config.zip
    headers:
      Content-Type: "application/octet-stream"
  tags:
    - solrcloud
    - solr_configsets
  when: collection.status == 404

- name: Create biocache collection if not exists
  run_once: true
  uri:
    url: "http://localhost:8983/solr/admin/collections?action=CREATE&name=biocache&numShards=1&replicationFactor={{ solr_hosts | default(groups['solrcloud'] | length) }}&collection.configName=biocache"
    method: GET
    status_code: 200
  tags:
    - solrcloud
    - solr_create_collection
  when: collection.status == 404

- import_role:
    name: solrcloud_config
  vars:
    - solr_config_host: 127.0.0.1
    - solr_zk_host: la_solrcloud_zoo_1
    - solr_user: "{{ docker_default_user }}"
    - solrcloud_num_shards: 1
  when: deployment_type == 'swarm'

  # We can let this port open during development
- name: Remove previous socat container for solr tunnel
  import_tasks: ../../docker-common/tasks/socat-rm.yml
  vars:
    name: la_solrcloud_solr_1
  run_once: true
  when: deployment_type == 'swarm' and docker_development_mode is defined and docker_development_mode | bool == false
  tags:
    - solr_config

- name: Redeploy stack without solr_temp_disable_shardsWhitelist
  include_tasks: docker-tasks.yml
  when: deployment_type == 'swarm' and solr_enable_shards_white_list is defined and solr_enable_shards_white_list | bool == true
