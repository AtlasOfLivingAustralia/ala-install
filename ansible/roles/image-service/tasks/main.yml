- include: ../../common/tasks/setfacts.yml
  tags:
    - image-service

- name: create images database
  postgresql_db: name=images
  become_user: postgres
  become: yes
  tags:
    - db
    - image-service

- name: create database user images 
  postgresql_user: db=images name={{ images_db_username }} password={{ images_db_password }} priv=ALL state=present
  become_user: postgres
  become: yes
  tags:
    - db
    - image-service

- include: ../../apache_vhost/tasks/main.yml context_path='{{ images_context_path }}' hostname='{{ images_hostname }}'
  tags:
    - deploy
    - apache_vhost
    - image-service
  when: not webserver_nginx

- name: add nginx vhost if configured
  include_role:
    name: nginx_vhost
  vars:
    hostname: "{{ images_hostname }}"
    context_path: "{{ images_context_path }}"
    nginx_paths:
      - path: "{{ images_context_path }}"
        sort_label: "1_ws"
        is_proxy: true
        proxy_pass: "http://127.0.0.1:8080{{ images_context_path }}"
      - path: "/store"
        sort_label: "2_store"
        is_proxy: false
        alias: "{{ data_dir }}/images/store"
  notify:
    - restart nginx
  tags:
    - nginx_vhost
    - deploy
    - image-service
  when: webserver_nginx

- include: ../../tomcat_deploy/tasks/main.yml war_url='{{ images_url }}' context_path='{{ images_context_path }}' hostname='{{ images_hostname }}'
  tags:
    - deploy
    - tomcat_vhost
    - image-service    

- name: ensure www directory exists
  file: path={{item}} state=directory owner={{tomcat_user}}  group={{tomcat_user}}
  with_items:
    - "/srv/{{ images_hostname }}/www"
  tags:
    - image-service

- name: ensure target directories exist [data subdirectories etc.]
  file: path={{item}} state=directory owner={{tomcat_user}} group={{tomcat_user}}
  with_items:
    - "{{data_dir}}/images/config"
  tags:
    - image-service

- name: ensure target directories exist [data subdirectories etc.]
  file: path={{item}} state=directory owner={{tomcat_user}}  group={{tomcat_user}} 
  with_items:
    - "{{data_dir}}/images/config"  
    - "{{data_dir}}/images/elasticsearch"  
    - "{{data_dir}}/images/store"
    - "{{data_dir}}/images/incoming"
    - "{{data_dir}}/images/bin/imgcnv"
  tags:
    - image-service

# Only create the symlink for apache hosts, as nginx has an inbuilt rule for this
- name: Create symlink to data/images/store from /srv/[hostname]/www/store
  command: "ln -s {{ data_dir }}/images/store /srv/{{ images_hostname }}/www/store" 
  ignore_errors: yes
  when: not webserver_nginx
  tags: 
    - image-service

- name: copy all config.properties
  template: src=config/config.properties dest={{data_dir}}/images/config/images-config.properties
  tags:
    - properties
    - image-service

- name: set data ownership
  file: path={{data_dir}}/{{images_app}} owner={{tomcat_user}} group={{tomcat_user}} recurse=true state=directory
  notify: 
    - restart tomcat
  tags:
    - image-service

- name: set data ownership
# FIXME: This fails when data_dir is /data, per our standard layout, because a symlink from /data/images/store/store to /data/images/store confuses the ansible file role
#  file: path={{data_dir}}/images owner={{tomcat_user}} group={{tomcat_user}} recurse=true
  shell: "chown -R {{ tomcat_user }}:{{ tomcat_user }} {{ data_dir }}/images"
  notify:
    - restart tomcat
  tags:
    - image-service

- name: install openjfx (Debian)
  apt: pkg=openjfx state=latest update_cache=yes
  when: ansible_os_family == "Debian" and use_openjdk8
  tags:
    - packages
