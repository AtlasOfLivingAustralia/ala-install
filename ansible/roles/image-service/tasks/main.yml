- include: ../../common/tasks/setfacts.yml
  tags:
    - image-service
    - properties

- name: create images database
  postgresql_db: name={{ images_db_name }}
  become_user: postgres
  become: yes
  tags:
    - db
    - image-service

- name: create {{ images_db_username }} DB user
  command: "psql -d {{ images_db_username }} -c \"create user images with password '{{images_db_password}}'\""
  become_user: postgres
  ignore_errors: yes
  tags:
    - image-service
    - db

- name: create database user images 
  postgresql_user: db=images name={{ images_db_username }} password={{ images_db_password }} priv=ALL state=present
  become_user: postgres
  become: yes
  tags:
    - db
    - image-service

- include: ../../apache_vhost/tasks/main.yml context_path='{{ images_context_path }}' hostname='{{ images_hostname }}'
  tags:
    - deploy
    - apache_vhost
    - image-service
  when: not webserver_nginx

- name: add nginx vhost if configured
  include_role:
    name: nginx_vhost
  vars:
    appname: "image-service"
    hostname: "{{ images_hostname }}"
    context_path: "{{ images_context_path }}"
    nginx_paths:
      - path: "{{ images_context_path }}"
        sort_label: "1_ws"
        is_proxy: true
        proxy_pass: "http://127.0.0.1:8080{{ images_context_path }}"
      - path: "/store"
        sort_label: "2_store"
        is_proxy: false
        alias: "{{ data_dir }}/images/store"
  tags:
    - nginx_vhost
    - deploy
    - image-service
  when: webserver_nginx

- name: ensure www directory exists
  file: path={{item}} state=directory
  with_items:
    - "/srv/{{ images_hostname }}/www"
  tags:
    - image-service

- name: ensure target directories exist [data subdirectories etc.]
  file: path={{item}} state=directory
  with_items:
    - "{{data_dir}}/image-service/config"
  tags:
    - image-service

- name: ensure target directories exist [data subdirectories etc.]
  file: path={{item}} state=directory
  with_items:
    - "{{data_dir}}/image-service/config"
    - "{{data_dir}}/image-service/store"
    - "{{data_dir}}/image-service/incoming"
    - "{{data_dir}}/image-service/bin/imgcnv"
    - "/var/log/atlas/image-service"
  tags:
    - image-service

# Only create the symlink for apache hosts, as nginx has an inbuilt rule for this
- name: Create symlink to data/image-service/store from /srv/[hostname]/www/store
  command: "ln -s {{ data_dir }}/image-service/store /srv/{{ images_hostname }}/www/store"
  ignore_errors: yes
  when: not webserver_nginx
  tags: 
    - image-service

- name: copy all config.properties
  template: src={{ item }} dest={{data_dir}}/image-service/config/
  with_items:
    - "config/image-service-config.yml"
    - "config/logback.groovy"
  tags:
    - deploy
    - image-service
    - properties

- name: add image-service jar and setup service
  include_role:
    name: exec-jar
  vars:
    service_name: 'image-service'
    jar_url: '{{ image_service_jar_url }}'
  tags:
    - deploy
    - service
    - image-service

- name: set data ownership 1
  file: path={{data_dir}}/image-service owner="image-service" group="image-service" recurse=true
  tags:
    - image-service
    - properties
    - image-service

- name: set data ownership 2
  file: path=/opt/atlas/image-service owner="image-service" group="image-service" recurse=true
  tags:
    - image-service
    - properties
    - image-service

- name: set data ownership 3
  file: path=/var/log/atlas/image-service owner="image-service" group="image-service" recurse=true
  tags:
    - image-service
    - properties
    - image-service

- name: add nginx vhost
  include_role:
    name: nginx_vhost
  vars:
    hostname: "{{ images_hostname }}"
    context_path: "{{ images_hostname_context_path }}"
  tags:
    - nginx_vhost
    - deploy
    - image-service

- name: install openjfx (Debian)
  apt: pkg=openjfx state=latest update_cache=yes
  when: ansible_os_family == "Debian" and use_openjdk8
  tags:
    - packages
    - image-service
