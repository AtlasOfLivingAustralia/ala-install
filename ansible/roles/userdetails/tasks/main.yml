- name: "set facts"
  include_role:
    name: common
    tasks_from: setfacts
  tags:
  - setfacts
  - userdetails
  - properties

- name: "Create system user for userdetails"
  user:
    name: userdetails
    state: present
    system: yes
  tags:
  - user
  - userdetails
  - properties

- name: ensure target directories exist data subdirectories etc.
  file:
    path: "{{item}}"
    state: directory
    owner: userdetails
    group: userdetails
  with_items:
    - "{{data_dir}}/userdetails"
    - "{{data_dir}}/userdetails/config"
    - "{{data_dir}}/userdetails/"
    - "/var/log/atlas/userdetails"
  tags:
    - properties
    - userdetails

- name: set data ownership
  file:
    path: "{{data_dir}}/userdetails"
    owner: userdetails
    group: userdetails
    recurse: true
  tags:
    - properties
    - userdetails

- name: copy userdetails-config.yml
  template:
    src: userdetails-config.yml
    dest: "{{data_dir}}/userdetails/config/userdetails-config.yml"
    owner: userdetails
    group: userdetails
  notify:
    - restart userdetails
  tags:
    - properties
    - userdetails

- name: copy logback config
  template:
    src: logback.groovy
    dest: "{{data_dir}}/userdetails/config/logback.groovy"
    owner: userdetails
    group: userdetails
  tags:
    - properties
    - userdetails

- name: add jar and service
  include_role:
    name: exec-jar
  vars:
    service_name: "userdetails"
    jar_url: '{{ userdetails_jar_url }}'
  tags:
    - deploy
    - service
    - service-conf
    - userdetails

- name: Ensure userdetails is in a running state
  service:
    name: userdetails
    state: started
  register: userdetailsService
  until: userdetailsService.status.ActiveState == "active"
  retries: 15
  delay: 30
  tags:
    - userdetails
    - db

- name: copy all SQL auth ip scripts
  template: src={{ item }} dest={{data_dir}}/userdetails/setup/
  with_items:
    - "sql/auth-ip.sql"
  when: userdetails_authorize_ip_list is defined
  tags:
    - userdetails
    - db
    - properties

- name: create auth ip in db if does not exists
  shell: "mysql --host={{ cas_db_hostname | default('localhost') }} --port={{ cas_db_port | default('3306') }}  --user={{ cas_db_username | default('cas') }} --password={{ cas_db_password | default('password') }} {{ cas_db_name | default('emmet')  }} -e \"set @ip='{{ item }}'; set @description=''; source {{data_dir}}/userdetails/setup/auth-ip.sql;\""
  loop: "{{ (userdetails_authorize_ip_list | regex_replace(' ', '')).split(',') }}"
  when: userdetails_authorize_ip_list is defined
  ignore_errors: no
  tags:
    - userdetails
    - db

- name: add nginx vhost
  include_role:
    name: nginx_vhost
  vars:
    appname: "userdetails"
    hostname: "{{ cas_host_name }}"
    context_path: "{{  userdetails_context_path | default('userdetails') }}"
    nginx_paths:
      - path: "/{{  userdetails_context_path | default('userdetails') }}"
        appname: "userdetails"
        is_proxy: true
        proxy_pass: "http://127.0.0.1:{{ userdetails_port | default('9001') }}/{{  userdetails_context_path | default('userdetails') }}"
  tags:
    - nginx_vhost
    - deploy
    - userdetails
  when: webserver_nginx
