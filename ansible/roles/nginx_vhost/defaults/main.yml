---
redirect: ''
nginx_conf_dir: '/etc/nginx'
ssl: true
# By default activate HTTP/2, which also allows HTTP/1.1 connections
# However, some users may find issues when HTTP/2 support is enabled at all if they can't work with ALPN
nginx_http2_enabled: true
# Allow optional activation of TLS-1.3 if users know their version of nginx supports it
nginx_tls_v1_3_enabled: false
# By default only support TLS-1.2 for security, but allow some users to activate others or deactivate it
nginx_tls_v1_2_enabled: true
# Allow optional activation of the insecure TLS-1.1 protocol
nginx_tls_v1_1_enabled: false
# Allow optional activation of the insecure TLS-1.0 protocol
# IMPORTANT: Only activate TLS-1.0 if you know that a critical user doesn't support newer safe TLS versions
nginx_tls_v1_0_enabled: false
# Default to a modern set of TLS ciphers
nginx_tls_ciphers: "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256"
force_https: true
nginx_root: "/srv/{{ hostname }}/www/"
context_path: '/'
# By default, no robots should be accessing any servers, customise this in your inventory to allow access to specific paths
robots_disallow_paths: ["/"]
# Semrush completely ignore robots.txt, so banning them by default from all of our servers
robots_disallow_useragents: ["Semrush"]
# Add IPs to this list in your inventory to disallow specific IP addresses in nginx
robots_disallow_ips: []
# Add IPs to this list that are known to send correct x-forwarded-for headers, and can hence be safely relied on
# https://nginx.org/en/docs/http/ngx_http_realip_module.html
nginx_set_real_ips: []
# If either of the following are set to true, a default host will be created
# Any existing default host will be deactivated from sites-enabled, but left in sites-available
aws_elb_healthcheck_default: false
nginx_default_vhost_required: false
# Customise the following to allow specific user agents to access the default vhost
# Set to an empty list to allow all user agents to access the default vhost
ala_default_allowed_useragents: ["ELB-HealthChecker"]
tomcat_server_port: '8080'
frame_options_header: true
content_type_options_header: true
xss_protection_header: false
nginx_cache: false
nginx_cache_path: "/data/nginx_cache"
nginx_cache_zone: "cache"
nginx_cache_zone_size: "10m"
nginx_cache_size: "2g"
nginx_cache_time: "60m"
nginx_cache_valid_time: "60m"
nginx_cache_invalid_time: "0s"
# Set this to true to have the nginx cache cleared when deployment completes
nginx_clear_cache_on_deploy: False

# Set this to true in your inventory if you know that you are only deploying a single nginx_vhost and you want to clear previous versions before deploying each time
clear_vhost_fragments: false
# Set this to true to enable support for 'upstream' load balancing features
nginx_load_balancing: false
# When load balancing is enabled, this is used to specify the maximum number of connections from nginx to the upstream load balanced server
# This is used to avoid denial of service on the upstream server when it is under load
nginx_max_conns: 50
# When nginx_load_balancing is enabled, this can be used to specify the maximum number of keepalive connections nginx should upstream coonections
# Defaults to the same as the max_conns default and should be customised whenever customising nginx_max_conns
# Set this to 0 if you want upstream load balancing without any keepalive
nginx_keepalive: 50
# When nginx_load_balancing is enabled and nginx_keepalive is greater than 0, this can be used to specify the maximum number of requests made through a keepalive connection before closing it
# Sets the maximum number of requests that can be served through one keepalive connection. After the maximum number of requests is made, the connection is closed
nginx_keepalive_requests: 100
# Sets a timeout (in seconds) during which an idle keepalive connection to an upstream server will stay open.
nginx_keepalive_timeout: 60
# sets the number of unsuccessful attempts to communicate with the server that should happen in the duration set by the fail_timeout parameter to consider the server unavailable for a duration also set by the fail_timeout parameter. 
# By default it is set to 0 to disable the accounting of attempts.
# Customise this if you intentionally want to use nginx_fail_timeout to specify a period of time where there are no requests made to the upstream because of failures
nginx_max_fails: 0
# Sets the time (in seconds) during which the specified number of unsuccessful attempts to communicate with the server should happen to consider the server unavailable;
# Also sets the period of time the server will be considered unavailable.
nginx_fail_timeout: 10
