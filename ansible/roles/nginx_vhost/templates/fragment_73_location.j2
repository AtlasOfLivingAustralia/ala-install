{% if robots_disallow_ips is defined and robots_disallow_ips|length > 0 %}
        if ($blocked_ip) {
            return 403;
        }
{% endif %}
{% if robots_disallow_useragents is defined and robots_disallow_useragents|length > 0 %}
        if ($blocked_user_agent) {
            return 444;
        }
{% endif %}
{% if nginx_rate_limit_enabled is defined and nginx_rate_limit_enabled | bool == True %}
        limit_req zone={{ nginx_rate_limit_name }} burst={{ nginx_rate_limit_burst }};
{% endif %}
{% if item.block_by_arguments is defined and item.block_by_arguments|length > 0 %}
        # These query argument and value combinations were specified in the ansible configuration to be blocked for this location
{% for next_block_by_argument in item.block_by_arguments %}
        if ( $arg_{{ next_block_by_argument.field }} {{ next_block_by_argument.comparison | default('~') }} "{{ next_block_by_argument.value }}" ) {
            return 403;
        }
{% endfor %}
{% endif %}
{% if item.rewrite_path is defined and item.rewrite_path %}
        rewrite ^ {{item.rewrite_path}}$1;
{% endif %}
{% if item.is_proxy %}
        # proxy_set_header Host $host;
        proxy_set_header Host {{ hostname }};
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_read_timeout 10m;
  {% if nginx_cache | bool == True and item.use_cache is defined and item.use_cache %}
        proxy_cache {{ nginx_cache_zone }};
    {% if nginx_cache_lock is defined and nginx_cache_lock %}
        # Avoid concurrent requests for the same item by adding a lock to cache requests for the same key
        proxy_cache_lock on;
        proxy_cache_lock_age {{ nginx_cache_lock_age | default ('5s') }};
        proxy_cache_lock_timeout {{ nginx_cache_lock_timeout | default('5s') }};
    {% endif %}
    {% if item.force_cache is defined and item.force_cache %}
        proxy_cache_valid 200 {{ nginx_cache_valid_time }}; 
    {% endif %}
    {% if nginx_proxy_ignore_client_abort is defined and nginx_proxy_ignore_client_abort %}
        # Enable the cache to be populated even if the client aborts the request if it eventually succeeds
        proxy_ignore_client_abort on;
    {% endif %}
  {% endif %}
{% if nginx_load_balancing | bool == false and (item.is_websocket is defined and item.is_websocket | bool == true) %}
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
{% endif %}
{% if nginx_load_balancing | bool == true and (item.unlimited_conns is not defined or item.unlimited_conns | bool != true) %}
        # This backend is defined in the upstream section of the same name
        proxy_pass http://{{ hostname }}_127.0.0.1_{{tomcat_server_port | default('8080', True)}}_backend{{ '_ala_default' if ala_default_vhost is defined and ala_default_vhost else '' }}{% if item.path|length == 0 %}/{% elif item.path|first == '/' %}{{ item.path }}{% else %}/{{ item.path }}{% endif %};
  {% if nginx_keepalive is defined and nginx_keepalive | int > 0 %}
        # Clear the "Connection" header because nginx_keepalive is > 0 and nginx_load_balancing is true
        proxy_set_header Connection "";
  {% endif %}
{% else %}
        proxy_pass {{ item.proxy_pass }};
{% endif %}
{% elif item.is_proxy_rewrite is defined and item.is_proxy_rewrite %}
        rewrite ^{{ item.path }}/?(.*) /$1 break;
        proxy_pass {{ item.proxy_pass }};
{% elif item.alias is defined %}
        alias {{ item.alias }};
    {% if item.add_header is defined and item.add_header %}
    add_header {{ item.add_header }};
    {% endif %}
    {% if item.try_files is defined and item.try_files %}
try_files {{ item.try_files }};
    {% endif %}
{% elif item.rewrite is defined %}
        return 301 {{ item.rewrite }};
{% elif item.fastcgi is defined and item.fastcgi %}
        try_files      $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass   unix:/var/run/php/php{{ ala_wordpress_php_version }}-fpm.sock;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include        fastcgi_params;
{% elif item.deny is defined and item.deny %}
        deny all;
{% elif item.expires is defined and item.expires %}
        expires {{ item.expires }};
{% else %}
        try_files {{ item.try_files }};
{% endif %}