<?xml version="1.0" encoding="UTF-8" ?>
<schema name="bie" version="1.2">
  <types>
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
    <fieldtype name="binary" class="solr.BinaryField"/>
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="date" class="solr.TrieDateField" omitNorms="true" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="tdate" class="solr.TrieDateField" omitNorms="true" precisionStep="6" positionIncrementGap="0"/>

    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>    

      <!-- A text field that has been "n-gramed" to allow partial term matching
        for use in auto completion
    -->
    <fieldType name="auto_text" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.ASCIIFoldingFilterFactory" preserveOriginal="false" />
            <filter class="solr.LowerCaseFilterFactory" />
            <filter class="solr.NGramFilterFactory" minGramSize="3" maxGramSize="30" />
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.ASCIIFoldingFilterFactory" preserveOriginal="false" />
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>
  <!-- Allows the hits at the start of the words to score higher that middle when used in
  conjunction with the auto_text fieldType in a search
  -->
  <fieldType name="auto_text_edge" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.ASCIIFoldingFilterFactory" preserveOriginal="false" />
            <filter class="solr.LowerCaseFilterFactory" />
            <filter class="solr.EdgeNGramFilterFactory" minGramSize="3" maxGramSize="30" />
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.ASCIIFoldingFilterFactory" preserveOriginal="false" />
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <fieldType name="concat_name" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory" />      
            <filter class="solr.TrimFilterFactory" /> 
            <filter class="solr.PatternReplaceFilterFactory" pattern="([^a-zA-Z])" replacement="" replace="all" />
            <filter class="solr.NGramFilterFactory" minGramSize="3" maxGramSize="30" /> 
        </analyzer>
    <analyzer type="query">
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>

    <fieldType name="stopped_common_name" class="solr.TextField">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.TrimFilterFactory" />
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="bie_stopwords.txt"/> 
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="bie_stopwords.txt"/> 
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="name_complete" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory" />      
            <filter class="solr.TrimFilterFactory" />     
            <filter class="solr.PatternReplaceFilterFactory" pattern="([().])" replacement="" replace="all" />
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory" />      
            <filter class="solr.TrimFilterFactory" />     
            <filter class="solr.PatternReplaceFilterFactory" pattern="([().])" replacement="" replace="all" />
        </analyzer>
    </fieldType>

    <fieldType name="auto_name_exact" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory" />      
            <filter class="solr.TrimFilterFactory" />     
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory" />      
            <filter class="solr.TrimFilterFactory" />     
        </analyzer>
    </fieldType>

    <fieldType name="text_suggest_ngram" class="solr.TextField">
      <analyzer type="index">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EdgeNGramFilterFactory" maxGramSize="20" minGramSize="1"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement="" replace="all"/>
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement="" replace="all"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="^(.{20})(.*)?" replacement="$1" replace="all"/>
      </analyzer>
    </fieldType>

    <fieldType name="text_suggest_edge" class="solr.TextField">
      <analyzer type="index">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([\.,;:-_])" replacement=" " replace="all"/>
        <filter class="solr.EdgeNGramFilterFactory" maxGramSize="30" minGramSize="1"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement="" replace="all"/>
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([\.,;:-_])" replacement=" " replace="all"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement="" replace="all"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="^(.{30})(.*)?" replacement="$1" replace="all"/>
      </analyzer>
    </fieldType>

    <!-- text_suggest : Matches whole terms in the suggest text  -->
    <fieldType name="text_suggest" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.WordDelimiterFilterFactory" 
              generateWordParts="1" 
              generateNumberParts="1"
              catenateWords="1"
              catenateNumbers="1"
              catenateAll="1"
              splitOnCaseChange="1"
              splitOnNumerics="1"
              preserveOriginal="1"
        />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement=" " replace="all"/>
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.WordDelimiterFilterFactory" 
              generateWordParts="0" 
              generateNumberParts="0"
              catenateWords="0"
              catenateNumbers="0"
              catenateAll="0"
              splitOnCaseChange="0"
              splitOnNumerics="0"
        />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement=" " replace="all"/>
      </analyzer>
    </fieldType>    

    <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
    <fieldType name="textTight" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
        <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
             possible with WordDelimiterFilter in conjuncton with stemming. -->
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- charFilter + WhitespaceTokenizer  -->
    <!--
    <fieldType name="textCharNorm" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>
    -->

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>
        <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <!-- The LowerCase TokenFilter does what you expect, which can be
             when you want your sorting to be case insensitive
          -->
        <filter class="solr.LowerCaseFilterFactory" />
        <!-- The TrimFilter removes any leading or trailing whitespace -->
        <filter class="solr.TrimFilterFactory" />
        <!-- The PatternReplaceFilter gives you the flexibility to use
             Java Regular expression to replace any sequence of characters
             matching a pattern with an arbitrary replacement string,
             which may include back references to portions of the original
             string matched by the pattern.

             See the Java Regular Expression documentation for more
             information on pattern and replacement string syntax.

             http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/package-summary.html
          -->
        <filter class="solr.PatternReplaceFilterFactory"  pattern="([^a-z])" replacement="" replace="all" />
      </analyzer>
    </fieldType>

    <fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldtype>

    <fieldtype name="payloads" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!--
        The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
        a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
        Attributes of the DelimitedPayloadTokenFilterFactory :
         "delimiter" - a one character delimiter. Default is | (pipe)
   "encoder" - how to encode the following value into a playload
      float -> org.apache.lucene.analysis.payloads.FloatEncoder,
      integer -> o.a.l.a.p.IntegerEncoder
      identity -> o.a.l.a.p.IdentityEncoder
            Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
         -->
        <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
      </analyzer>
    </fieldtype>

    <!-- lowercases the entire field value, keeping it as a single token.  -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>


    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

 </types>

 <fields>
   <!-- Valid attributes for fields:
     name: mandatory - the name for the field
     type: mandatory - the name of a previously defined type from the
       <types> section
     indexed: true if this field should be indexed (searchable or sortable)
     stored: true if this field should be retrievable
     compressed: [false] if this field should be stored using gzip compression
       (this will only apply if the field type is compressable; among
       the standard field types, only TextField and StrField are)
     multiValued: true if this field may contain multiple values per document
     omitNorms: (expert) set to true to omit the norms associated with
       this field (this disables length normalization and index-time
       boosting for the field, and saves some memory).  Only full-text
       fields or fields that need an index-time boost need norms.
     termVectors: [false] set to true to store the term vector for a
       given field.
       When using MoreLikeThis, fields used for similarity should be
       stored for best performance.
     termPositions: Store position information with the term vector.
       This will increase storage costs.
     termOffsets: Store offset information with the term vector. This
       will increase storage costs.
     default: a value that should be used if no value is specified
       when adding a document.
   -->
   <!-- start of BIE Lucene Fields -->
   
   <!-- Common fields to all -->
   <field name="id" type="string" indexed="true" stored="true" required="true" />
   <field name="_version_" type="long" indexed="true" stored="true" multiValued="false"/>
   <field name="guid" type="string" indexed="true" stored="true" required="true" />
   <field name="idxtype" type="string" indexed="true" stored="true" required="true" />
   <field name="name" type="string" indexed="true" stored="true" multiValued="false" omitNorms="false" />
   <field name="description" type="text" indexed="true" stored="true" multiValued="false" omitNorms="false" />
   <field name="content" type="text" indexed="true" stored="true" multiValued="false" omitNorms="false" />

   <!-- Weighting fields -->
   <field name="searchWeight" type="double" multiValued="false" omitNorms="true" />
   <field name="suggestWeight" type="double" multiValued="false" omitNorms="true" />

   <!-- Taxa fields -->
   <field name="taxonConceptID" type="string" indexed="true" stored="true" omitNorms="true" />
   <field name="scientificNameID" type="string" indexed="true" stored="true" omitNorms="true" />
   <field name="nameID" type="string" indexed="true" stored="true" omitNorms="false" />
   <field name="taxonGuid" type="string" indexed="true" stored="true" required="false" multiValued="false"/>
   <field name="parentGuid" type="string" indexed="true" stored="true" omitNorms="true" />
   <field name="otherGuid" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
   <field name="synonym" type="string" indexed="true" stored="true" multiValued="true" omitNorms="false" />
   <field name="nomenclaturalCode" type="lowercase" indexed="true" stored="true" omitNorms="true" />
   <field name="scientificName" type="lowercase" indexed="true" stored="true" omitNorms="false" />
   <field name="scientificNameAuthorship" type="lowercase" indexed="true" stored="true" omitNorms="false" />
   <field name="nameComplete" type="string" indexed="true" stored="true" omitNorms="false" />
   <field name="nameFormatted" type="string" indexed="true" stored="true" omitNorms="false" />
   <field name="acceptedConceptName" type="lowercase" indexed="true" stored="true" multiValued="false" omitNorms="false" />
   <field name="acceptedConceptID" type="string" indexed="true" stored="true" multiValued="false" omitNorms="false" />
   <field name="conservationStatus" type="string" indexed="true" stored="true" multiValued="true" omitNorms="false" />
   <field name="pestStatus" type="string" indexed="true" stored="true" multiValued="true" omitNorms="true" />
   <field name="commonName" type="text" indexed="true" stored="true" multiValued="true" omitNorms="false" />
   <field name="commonNameExact" type="lowercase" indexed="true" stored="false" multiValued="true" omitNorms="false"/>
   <field name="commonNameSort" type="string" indexed="true" stored="true" multiValued="false" omitNorms="true" />
   <field name="commonNameDisplay" type="string" indexed="false" stored="true" multiValued="false" omitNorms="true" />
   <field name="commonNameSingle" type="string" indexed="true" stored="true" multiValued="false" omitNorms="false" />
   <field name="centroid" type="string" indexed="true" stored="true" multiValued="false" omitNorms="false" />
   <field name="rank" type="string" indexed="true" stored="true" multiValued="false" omitNorms="true" />
   <field name="rankID" type="int" indexed="true" stored="true" multiValued="false" omitNorms="true" />
   <field name="datasetID" type="string" indexed="true" stored="true" required="false" omitNorms="true" multiValued="false" />
   <field name="dataProvider" type="string" indexed="true" stored="true" required="false" omitNorms="true" multiValued="false" />
   <field name="uid" type="string" indexed="true" stored="true" required="false" omitNorms="true" multiValued="true" />
   <field name="occurrenceCount" type="int" indexed="true" stored="true" multiValued="false" omitNorms="true" />
   <field name="georeferencedCount" type="int" indexed="true" stored="true" multiValued="false" omitNorms="true" />
   <field name="nameType" type="string" indexed="true" stored="true" required="false" omitNorms="true" multiValued="false" />
   <field name="taxonomicStatus" type="string" indexed="true" stored="true" required="false" omitNorms="true" multiValued="false" />
   <field name="nomenclaturalStatus" type="string" indexed="true" stored="true" required="false" omitNorms="true" multiValued="false" />
   <field name="establishmentMeans" type="string" indexed="true" stored="true" required="false" omitNorms="true" multiValued="false" />
   <field name="distribution" type="string" indexed="true" stored="true" required="false" omitNorms="true" multiValued="true" />
   <field name="status" type="string" indexed="true" stored="true" required="false" multiValued="false"/>
   <field name="source" type="string" indexed="true" stored="true" required="false" multiValued="false"/>
   <field name="subject" type="string" indexed="true" stored="true" required="false" multiValued="false"/>
   <field name="format" type="string" indexed="true" stored="true" required="false" multiValued="false"/>
   <field name="license" type="string" indexed="true" stored="true" required="false" multiValued="false"/>
   <field name="rights" type="string" indexed="true" stored="true" required="false" multiValued="false"/>
   <field name="language" type="string" indexed="true" stored="true" required="false" multiValued="false"/>
   <field name="priority" type="int" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="additionalIdentifiers" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
   <field name="datasetName" type="string" indexed="true" stored="true" required="false" multiValued="false"/>
   <field name="rightsHolder" type="string" indexed="true" stored="true" required="false" multiValued="false"/>
   <field name="namePublishedIn" type="string" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="namePublishedInYear" type="string" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="namePublishedInID" type="lowercase" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="nameAccordingTo" type="string" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="nameAccordingToID" type="lowercase" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="taxonRemarks" type="lowercase" indexed="false" stored="true" required="false" multiValued="true"/>
   <field name="provenance" type="lowercase" indexed="false" stored="true" required="false" multiValued="true"/>
   <field name="locatedInHubCountry" type="boolean" indexed="true" stored="true" required="false" multiValued="false"/>
   <field name="temporal" type="lowercase" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="locationID" type="string" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="locality" type="lowercase" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="countryCode" type="lowercase" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="sex" type="lowercase" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="lifeStage" type="lowercase" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="isPlural" type="boolean" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="isPreferredName" type="boolean" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="organismPart" type="lowercase" indexed="false" stored="true" required="false" multiValued="false"/>
   <field name="labels" type="lowercase" indexed="false" stored="true" required="false" multiValued="false"/>

   <!-- higher taxonomy -->
   <field name="speciesGroup" type="string" indexed="true" stored="true" multiValued="true" omitNorms="true" />
   <field name="speciesSubgroup" type="string" indexed="true" stored="true" multiValued="true" omitNorms="true" />
   <!-- Australian states, supports the region functionality -->
   <field name="imageAvailable" type="string" indexed="true" stored="true" multiValued="false" omitNorms="true" />
   <field name="image" type="string" indexed="true" stored="true" multiValued="false" omitNorms="true" />
   <!-- Collection / Institution -->
   <field name="url" type="string" indexed="true" stored="true" multiValued="false" omitNorms="false" />
   <field name="acronym" type="string" indexed="true" stored="true" multiValued="false" omitNorms="false" />
   <field name="institutionType" type="string" indexed="true" stored="true" multiValued="false" omitNorms="false" />
   
   <!-- WordPress fields -->
   <field name="categories" type="string" indexed="true" stored="true" multiValued="true" omitNorms="false" />

   <!-- LinkIdentifier fields -->
   <field name="linkIdentifier" type="string" indexed="true" stored="true" multiValued="false" omitNorms="true" />

   <!-- Name variant fields -->
   <field name="nameVariant" type="lowercase" indexed="true" stored="true" multiValued="true" omitNorms="false" />
   <field name="verbatimNomenclaturalCode" type="lowercase" indexed="true" stored="true" required="false" omitNorms="true" multiValued="false" />
   <field name="verbatimTaxonomicStatus" type="lowercase" indexed="true" stored="true" required="false" omitNorms="true" multiValued="false" />
   <field name="verbatimNomenclaturalStatus" type="lowercase" indexed="true" stored="true" required="false" omitNorms="true" multiValued="false" />
   <field name="score" type="int" indexed="false" stored="true" required="false" multiValued="false"/>

   <!-- catchall field, containing all other searchable text fields (implemented
        via copyField further on in this schema  -->
   <field name="text" type="text" indexed="true" stored="false" multiValued="true"/>
   <field name="auto_text" type="auto_text" indexed="true" stored="true" multiValued="true" omitNorms="true" omitTermFreqAndPositions="true"/>
   <field name="concat_name" type="concat_name" indexed="true" stored="false" multiValued="true" omitNorms="true" omitTermFreqAndPositions="true"/>
   <field name="doc_name" type="text" indexed="true" stored="true" multiValued="true" omitNorms="false" omitTermFreqAndPositions="false"/>

  
   <!--  NC:2013-02-08 remove the omitTermFreqAndPositions because this setting will cause an exception when searching for a phrase -->
   <field name="stopped_common_name" type="stopped_common_name" indexed="true" stored="false" multiValued="true" omitNorms="true" />
   <field name="name_complete" type="name_complete" indexed="true" stored="false" multiValued="true" omitNorms="true" omitTermFreqAndPositions="true"/>
   
   <!-- Fields used to rank exact matches higher -->
   <field name="exact_text" type="lowercase" indexed="true" stored="false" omitNorms="true" multiValued="true"/>
   
   <dynamicField name="rk_*"  type="string"  indexed="true"  stored="true"/>
   <dynamicField name="rkid_*"  type="string"  indexed="true"  stored="true"/>


     <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
          will be used if the name matches any of the patterns.
          RESTRICTION: the glob-like pattern in the name attribute must have
          a "*" only at the start or the end.
          EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
          Longer patterns will be matched first.  if equal size patterns
          both match, the first appearing in the schema will be used.  -->
   <dynamicField name="*Count"  type="int"    indexed="true"  stored="true"/>     
   <dynamicField name="*_i"  type="int"    indexed="true"  stored="true"/>
   <dynamicField name="*_m_s"  type="string" multiValued="true"  indexed="true"  stored="true"/>
   <dynamicField name="*_s"  type="string"  indexed="true"  stored="true"/>   
   <dynamicField name="*_l"  type="long"   indexed="true"  stored="true"/>
   <dynamicField name="*_t"  type="text"    indexed="true"  stored="true"/>
   <dynamicField name="*_b"  type="boolean" indexed="true"  stored="true"/>
   <dynamicField name="*_f"  type="float"  indexed="true"  stored="true"/>
   <dynamicField name="*_d"  type="double" indexed="true"  stored="true"/>
   <dynamicField name="*_dt" type="date"    indexed="true"  stored="true"/>

   <!-- some trie-coded dynamic fields for faster range queries -->
   <dynamicField name="*_ti" type="tint"    indexed="true"  stored="true"/>
   <dynamicField name="*_tl" type="tlong"   indexed="true"  stored="true"/>
   <dynamicField name="*_tf" type="tfloat"  indexed="true"  stored="true"/>
   <dynamicField name="*_td" type="tdouble" indexed="true"  stored="true"/>
   <dynamicField name="*_tdt" type="tdate"  indexed="true"  stored="true"/>

   <!-- <dynamicField name="*_pi"  type="pint"    indexed="true"  stored="true"/> -->

   <dynamicField name="ignored_*" type="ignored" multiValued="true"/>
   <dynamicField name="attr_*" type="text" indexed="true" stored="true" multiValued="true"/>

   <!-- <dynamicField name="random_*" type="random" /> -->

   <!-- uncomment the following to ignore any fields that don't already match an existing
        field name or dynamic field, rather than reporting them as an error.
        alternately, change the type="ignored" to some other type e.g. "text" if you want
        unknown fields indexed and/or stored by default -->
   <!--dynamicField name="*" type="ignored" multiValued="true" /-->

 </fields>

 <!-- Field to use to determine and enforce document uniqueness.
      Unless this field is marked with required="false", it will be a required field
   -->
 <uniqueKey>id</uniqueKey>

 <!-- field for the QueryParser to use when an explicit fieldname is absent -->
 <!--<defaultSearchField>text</defaultSearchField>-->

 <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
 <!--<solrQueryParser defaultOperator="OR"/>-->

  <!-- copyField commands copy one field to another at the time a document
        is added to the index.  It's used either to index the same field differently,
        or to add multiple fields to the same field for easier/faster searching.  -->

   <!-- BIE text field sources -->
   <copyField source="guid" dest="text"/>
   <copyField source="otherGuid" dest="text"/>
   <copyField source="name" dest="text"/>
   <copyField source="commonName" dest="text"/>
   <copyField source="speciesGroup" dest="text"/>
   <copyField source="speciesSubgroup" dest="text"/>
   <copyField source="acronym" dest="text"/>
   <copyField source="scientificName" dest="text"/>
   <!-- <copyField source="commonName" dest="text"/> -->
   <copyField source="pestStatus" dest="text"/>
   <copyField source="category_*" dest="text"/>
   <copyField source="conservationStatus" dest="text"/>

   <!-- doc_name is a field used to to search for any document by its name or title via Boost Query -->
   <copyField source="name" dest="doc_name"/>
   <copyField source="nameComplete" dest="doc_name"/>
   <copyField source="commonName" dest="doc_name"/>

   <!-- copy fields required for the auto complete -->
   <copyField source="scientificName" dest="auto_text"/>
   <copyField source="commonName" dest="auto_text"/>

   <copyField source="name" dest="exact_text"/>
   <copyField source="acronym" dest="exact_text"/>
   <copyField source="scientificName" dest="exact_text"/>
   <copyField source="commonNameExact" dest="exact_text"/>
   
   <copyField source="scientificName" dest="concat_name"/>
   
   <copyField source="commonName" dest="concat_name"/>
   
   <copyField source="commonName" dest="stopped_common_name"/>
</schema>
